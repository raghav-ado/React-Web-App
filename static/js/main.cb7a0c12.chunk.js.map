{"version":3,"sources":["components/Cockpit/Cockpit.module.css","components/Persons/Person/Person.module.css","containers/App.module.css","components/Persons/Person/Person.js","components/Persons/Persons.js","components/Cockpit/Cockpit.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","person","props","className","styles","Person","count","cross","onClick","click","name","age","children","type","onChange","changed","value","persons","map","index","key","id","clicked","event","cockpit","classes","default","toggleBtn","document","getElementById","btnClass","btnText","showPersons","Red","length","pop","push","yellow","bold","red","remove","Cockpit","title","join","App","state","nameChangeHandler","personIndex","findIndex","p","target","setState","deletePersonHandler","splice","togglePersonsHandler","doesShow","this","Persons","appTitle","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb7a0c12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"Cockpit_red__3GSoJ\",\"yellow\":\"Cockpit_yellow__nakLY\",\"default\":\"Cockpit_default__30RRZ\",\"bold\":\"Cockpit_bold__3urf2\",\"Cockpit\":\"Cockpit_Cockpit__snX-D\",\"Red\":\"Cockpit_Red__2ee36\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__2_l3Y\",\"name\":\"Person_name__1p9Tj\",\"cross\":\"Person_cross__2CHPD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1IQbR\"};","import React from \"react\";\nimport styles from \"./Person.module.css\";\n\nconst person = (props) => {\n  return (\n    <div className={styles.Person}>\n      <span>\n        <span>Person - {props.count}</span>\n        <span className={styles.cross} onClick={props.click}>\n          &times;\n        </span>\n      </span>\n      <p>\n        Hello I'm <span className={styles.name}>{props.name}</span> and I am{\" \"}\n        {props.age} years old\n      </p>\n      <p>{props.children}</p>\n      <label>Edit Name:</label>\n      <input type=\"text\" onChange={props.changed} value={props.name} />\n    </div>\n  );\n};\n\nexport default person;\n","import React from \"react\";\nimport Person from \"./Person/Person\";\n\nconst persons = (props) =>\n  props.persons.map((person, index) => {\n    let count = index;\n    return (\n      <Person\n        key={person.id}\n        name={person.name}\n        age={person.age}\n        count={++count}\n        click={() => props.clicked(index)}\n        changed={(event) => props.changed(event, person.id)}\n      />\n    );\n  });\n\nexport default persons;\n","import React from \"react\";\nimport styles from \"./Cockpit.module.css\";\n\nconst cockpit = (props) => {\n  const classes = [styles.default];\n  const toggleBtn = document.getElementById(\"toggle-btn\");\n  let btnClass = \"\";\n  let btnText = \"Show Persons\";\n\n  if (props.showPersons) {\n    btnClass = styles.Red;\n    btnText = \"Hide Persons\";\n  }\n\n  if (props.persons.length <= 2) {\n    classes.pop(styles.default);\n    classes.push(styles.yellow);\n  }\n  if (props.persons.length === 1) {\n    classes.push(styles.bold);\n  }\n\n  if (props.persons.length < 1) {\n    classes.pop(styles.yellow);\n    classes.push(styles.red, styles.bold);\n    toggleBtn.remove();\n  }\n\n  return (\n    <div className={styles.Cockpit}>\n      <h1>{props.title}</h1>\n      <p className={classes.join(\" \")}>\n        No. of Persons - {props.persons.length}\n      </p>\n      <button id=\"toggle-btn\" className={btnClass} onClick={props.clicked}>\n        {btnText}\n      </button>\n    </div>\n  );\n};\n\nexport default cockpit;\n","import React, { Component } from \"react\";\nimport styles from \"./App.module.css\";\nimport Persons from \"../components/Persons/Persons\";\nimport Cockpit from \"../components/Cockpit/Cockpit\";\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: \"1\", name: \"Max\", age: 28 },\n      { id: \"2\", name: \"Maira\", age: 30 },\n      { id: \"3\", name: \"Adonnis\", age: 22 },\n    ],\n    showPersons: false,\n  };\n\n  nameChangeHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex((p) => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex],\n    };\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState({\n      persons: persons,\n    });\n  };\n\n  deletePersonHandler = (personIndex) => {\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({ persons: persons });\n  };\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  };\n\n  render() {\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = (\n        <Persons\n          persons={this.state.persons}\n          clicked={this.deletePersonHandler}\n          changed={this.nameChangeHandler}\n        />\n      );\n    }\n\n    return (\n      <div className={styles.App}>\n        <Cockpit\n          title={this.props.appTitle}\n          showPersons={this.state.showPersons}\n          persons={this.state.persons}\n          clicked={this.togglePersonsHandler}\n        />\n        {persons}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App appTitle=\"Persons Manager\" />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}